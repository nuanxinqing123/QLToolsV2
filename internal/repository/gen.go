// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repository

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                   = new(Query)
	CdKeys              *cdKeys
	EnvPanels           *envPanels
	EnvPlugins          *envPlugins
	Envs                *envs
	LoginHistories      *loginHistories
	Panels              *panels
	PluginExecutionLogs *pluginExecutionLogs
	Plugins             *plugins
	Users               *users
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	CdKeys = &Q.CdKeys
	EnvPanels = &Q.EnvPanels
	EnvPlugins = &Q.EnvPlugins
	Envs = &Q.Envs
	LoginHistories = &Q.LoginHistories
	Panels = &Q.Panels
	PluginExecutionLogs = &Q.PluginExecutionLogs
	Plugins = &Q.Plugins
	Users = &Q.Users
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                  db,
		CdKeys:              newCdKeys(db, opts...),
		EnvPanels:           newEnvPanels(db, opts...),
		EnvPlugins:          newEnvPlugins(db, opts...),
		Envs:                newEnvs(db, opts...),
		LoginHistories:      newLoginHistories(db, opts...),
		Panels:              newPanels(db, opts...),
		PluginExecutionLogs: newPluginExecutionLogs(db, opts...),
		Plugins:             newPlugins(db, opts...),
		Users:               newUsers(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	CdKeys              cdKeys
	EnvPanels           envPanels
	EnvPlugins          envPlugins
	Envs                envs
	LoginHistories      loginHistories
	Panels              panels
	PluginExecutionLogs pluginExecutionLogs
	Plugins             plugins
	Users               users
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                  db,
		CdKeys:              q.CdKeys.clone(db),
		EnvPanels:           q.EnvPanels.clone(db),
		EnvPlugins:          q.EnvPlugins.clone(db),
		Envs:                q.Envs.clone(db),
		LoginHistories:      q.LoginHistories.clone(db),
		Panels:              q.Panels.clone(db),
		PluginExecutionLogs: q.PluginExecutionLogs.clone(db),
		Plugins:             q.Plugins.clone(db),
		Users:               q.Users.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                  db,
		CdKeys:              q.CdKeys.replaceDB(db),
		EnvPanels:           q.EnvPanels.replaceDB(db),
		EnvPlugins:          q.EnvPlugins.replaceDB(db),
		Envs:                q.Envs.replaceDB(db),
		LoginHistories:      q.LoginHistories.replaceDB(db),
		Panels:              q.Panels.replaceDB(db),
		PluginExecutionLogs: q.PluginExecutionLogs.replaceDB(db),
		Plugins:             q.Plugins.replaceDB(db),
		Users:               q.Users.replaceDB(db),
	}
}

type queryCtx struct {
	CdKeys              ICdKeysDo
	EnvPanels           IEnvPanelsDo
	EnvPlugins          IEnvPluginsDo
	Envs                IEnvsDo
	LoginHistories      ILoginHistoriesDo
	Panels              IPanelsDo
	PluginExecutionLogs IPluginExecutionLogsDo
	Plugins             IPluginsDo
	Users               IUsersDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		CdKeys:              q.CdKeys.WithContext(ctx),
		EnvPanels:           q.EnvPanels.WithContext(ctx),
		EnvPlugins:          q.EnvPlugins.WithContext(ctx),
		Envs:                q.Envs.WithContext(ctx),
		LoginHistories:      q.LoginHistories.WithContext(ctx),
		Panels:              q.Panels.WithContext(ctx),
		PluginExecutionLogs: q.PluginExecutionLogs.WithContext(ctx),
		Plugins:             q.Plugins.WithContext(ctx),
		Users:               q.Users.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
