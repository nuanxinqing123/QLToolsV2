// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repository

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/nuanxinqing123/QLToolsV2/internal/model"
)

func newPluginExecutionLogs(db *gorm.DB, opts ...gen.DOOption) pluginExecutionLogs {
	_pluginExecutionLogs := pluginExecutionLogs{}

	_pluginExecutionLogs.pluginExecutionLogsDo.UseDB(db, opts...)
	_pluginExecutionLogs.pluginExecutionLogsDo.UseModel(&model.PluginExecutionLogs{})

	tableName := _pluginExecutionLogs.pluginExecutionLogsDo.TableName()
	_pluginExecutionLogs.ALL = field.NewAsterisk(tableName)
	_pluginExecutionLogs.ID = field.NewInt64(tableName, "id")
	_pluginExecutionLogs.CreatedAt = field.NewTime(tableName, "created_at")
	_pluginExecutionLogs.PluginID = field.NewInt64(tableName, "plugin_id")
	_pluginExecutionLogs.EnvID = field.NewInt64(tableName, "env_id")
	_pluginExecutionLogs.ExecutionStatus = field.NewString(tableName, "execution_status")
	_pluginExecutionLogs.ExecutionTime = field.NewInt32(tableName, "execution_time")
	_pluginExecutionLogs.InputData = field.NewString(tableName, "input_data")
	_pluginExecutionLogs.OutputData = field.NewString(tableName, "output_data")
	_pluginExecutionLogs.ErrorMessage = field.NewString(tableName, "error_message")
	_pluginExecutionLogs.StackTrace = field.NewString(tableName, "stack_trace")

	_pluginExecutionLogs.fillFieldMap()

	return _pluginExecutionLogs
}

// pluginExecutionLogs 插件执行日志表
type pluginExecutionLogs struct {
	pluginExecutionLogsDo

	ALL             field.Asterisk
	ID              field.Int64  // 主键ID
	CreatedAt       field.Time   // 创建时间
	PluginID        field.Int64  // 插件ID
	EnvID           field.Int64  // 环境变量ID
	ExecutionStatus field.String // 执行状态(success,error,timeout)
	ExecutionTime   field.Int32  // 执行耗时(毫秒)
	InputData       field.String // 输入数据
	OutputData      field.String // 输出数据
	ErrorMessage    field.String // 错误信息
	StackTrace      field.String // 错误堆栈

	fieldMap map[string]field.Expr
}

func (p pluginExecutionLogs) Table(newTableName string) *pluginExecutionLogs {
	p.pluginExecutionLogsDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pluginExecutionLogs) As(alias string) *pluginExecutionLogs {
	p.pluginExecutionLogsDo.DO = *(p.pluginExecutionLogsDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pluginExecutionLogs) updateTableName(table string) *pluginExecutionLogs {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.PluginID = field.NewInt64(table, "plugin_id")
	p.EnvID = field.NewInt64(table, "env_id")
	p.ExecutionStatus = field.NewString(table, "execution_status")
	p.ExecutionTime = field.NewInt32(table, "execution_time")
	p.InputData = field.NewString(table, "input_data")
	p.OutputData = field.NewString(table, "output_data")
	p.ErrorMessage = field.NewString(table, "error_message")
	p.StackTrace = field.NewString(table, "stack_trace")

	p.fillFieldMap()

	return p
}

func (p *pluginExecutionLogs) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pluginExecutionLogs) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 10)
	p.fieldMap["id"] = p.ID
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["plugin_id"] = p.PluginID
	p.fieldMap["env_id"] = p.EnvID
	p.fieldMap["execution_status"] = p.ExecutionStatus
	p.fieldMap["execution_time"] = p.ExecutionTime
	p.fieldMap["input_data"] = p.InputData
	p.fieldMap["output_data"] = p.OutputData
	p.fieldMap["error_message"] = p.ErrorMessage
	p.fieldMap["stack_trace"] = p.StackTrace
}

func (p pluginExecutionLogs) clone(db *gorm.DB) pluginExecutionLogs {
	p.pluginExecutionLogsDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pluginExecutionLogs) replaceDB(db *gorm.DB) pluginExecutionLogs {
	p.pluginExecutionLogsDo.ReplaceDB(db)
	return p
}

type pluginExecutionLogsDo struct{ gen.DO }

type IPluginExecutionLogsDo interface {
	gen.SubQuery
	Debug() IPluginExecutionLogsDo
	WithContext(ctx context.Context) IPluginExecutionLogsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPluginExecutionLogsDo
	WriteDB() IPluginExecutionLogsDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPluginExecutionLogsDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPluginExecutionLogsDo
	Not(conds ...gen.Condition) IPluginExecutionLogsDo
	Or(conds ...gen.Condition) IPluginExecutionLogsDo
	Select(conds ...field.Expr) IPluginExecutionLogsDo
	Where(conds ...gen.Condition) IPluginExecutionLogsDo
	Order(conds ...field.Expr) IPluginExecutionLogsDo
	Distinct(cols ...field.Expr) IPluginExecutionLogsDo
	Omit(cols ...field.Expr) IPluginExecutionLogsDo
	Join(table schema.Tabler, on ...field.Expr) IPluginExecutionLogsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPluginExecutionLogsDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPluginExecutionLogsDo
	Group(cols ...field.Expr) IPluginExecutionLogsDo
	Having(conds ...gen.Condition) IPluginExecutionLogsDo
	Limit(limit int) IPluginExecutionLogsDo
	Offset(offset int) IPluginExecutionLogsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPluginExecutionLogsDo
	Unscoped() IPluginExecutionLogsDo
	Create(values ...*model.PluginExecutionLogs) error
	CreateInBatches(values []*model.PluginExecutionLogs, batchSize int) error
	Save(values ...*model.PluginExecutionLogs) error
	First() (*model.PluginExecutionLogs, error)
	Take() (*model.PluginExecutionLogs, error)
	Last() (*model.PluginExecutionLogs, error)
	Find() ([]*model.PluginExecutionLogs, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PluginExecutionLogs, err error)
	FindInBatches(result *[]*model.PluginExecutionLogs, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PluginExecutionLogs) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPluginExecutionLogsDo
	Assign(attrs ...field.AssignExpr) IPluginExecutionLogsDo
	Joins(fields ...field.RelationField) IPluginExecutionLogsDo
	Preload(fields ...field.RelationField) IPluginExecutionLogsDo
	FirstOrInit() (*model.PluginExecutionLogs, error)
	FirstOrCreate() (*model.PluginExecutionLogs, error)
	FindByPage(offset int, limit int) (result []*model.PluginExecutionLogs, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPluginExecutionLogsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p pluginExecutionLogsDo) Debug() IPluginExecutionLogsDo {
	return p.withDO(p.DO.Debug())
}

func (p pluginExecutionLogsDo) WithContext(ctx context.Context) IPluginExecutionLogsDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pluginExecutionLogsDo) ReadDB() IPluginExecutionLogsDo {
	return p.Clauses(dbresolver.Read)
}

func (p pluginExecutionLogsDo) WriteDB() IPluginExecutionLogsDo {
	return p.Clauses(dbresolver.Write)
}

func (p pluginExecutionLogsDo) Session(config *gorm.Session) IPluginExecutionLogsDo {
	return p.withDO(p.DO.Session(config))
}

func (p pluginExecutionLogsDo) Clauses(conds ...clause.Expression) IPluginExecutionLogsDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pluginExecutionLogsDo) Returning(value interface{}, columns ...string) IPluginExecutionLogsDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pluginExecutionLogsDo) Not(conds ...gen.Condition) IPluginExecutionLogsDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pluginExecutionLogsDo) Or(conds ...gen.Condition) IPluginExecutionLogsDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pluginExecutionLogsDo) Select(conds ...field.Expr) IPluginExecutionLogsDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pluginExecutionLogsDo) Where(conds ...gen.Condition) IPluginExecutionLogsDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pluginExecutionLogsDo) Order(conds ...field.Expr) IPluginExecutionLogsDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pluginExecutionLogsDo) Distinct(cols ...field.Expr) IPluginExecutionLogsDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pluginExecutionLogsDo) Omit(cols ...field.Expr) IPluginExecutionLogsDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pluginExecutionLogsDo) Join(table schema.Tabler, on ...field.Expr) IPluginExecutionLogsDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pluginExecutionLogsDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPluginExecutionLogsDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pluginExecutionLogsDo) RightJoin(table schema.Tabler, on ...field.Expr) IPluginExecutionLogsDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pluginExecutionLogsDo) Group(cols ...field.Expr) IPluginExecutionLogsDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pluginExecutionLogsDo) Having(conds ...gen.Condition) IPluginExecutionLogsDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pluginExecutionLogsDo) Limit(limit int) IPluginExecutionLogsDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pluginExecutionLogsDo) Offset(offset int) IPluginExecutionLogsDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pluginExecutionLogsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPluginExecutionLogsDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pluginExecutionLogsDo) Unscoped() IPluginExecutionLogsDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pluginExecutionLogsDo) Create(values ...*model.PluginExecutionLogs) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pluginExecutionLogsDo) CreateInBatches(values []*model.PluginExecutionLogs, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pluginExecutionLogsDo) Save(values ...*model.PluginExecutionLogs) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pluginExecutionLogsDo) First() (*model.PluginExecutionLogs, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PluginExecutionLogs), nil
	}
}

func (p pluginExecutionLogsDo) Take() (*model.PluginExecutionLogs, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PluginExecutionLogs), nil
	}
}

func (p pluginExecutionLogsDo) Last() (*model.PluginExecutionLogs, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PluginExecutionLogs), nil
	}
}

func (p pluginExecutionLogsDo) Find() ([]*model.PluginExecutionLogs, error) {
	result, err := p.DO.Find()
	return result.([]*model.PluginExecutionLogs), err
}

func (p pluginExecutionLogsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PluginExecutionLogs, err error) {
	buf := make([]*model.PluginExecutionLogs, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pluginExecutionLogsDo) FindInBatches(result *[]*model.PluginExecutionLogs, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pluginExecutionLogsDo) Attrs(attrs ...field.AssignExpr) IPluginExecutionLogsDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pluginExecutionLogsDo) Assign(attrs ...field.AssignExpr) IPluginExecutionLogsDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pluginExecutionLogsDo) Joins(fields ...field.RelationField) IPluginExecutionLogsDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pluginExecutionLogsDo) Preload(fields ...field.RelationField) IPluginExecutionLogsDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pluginExecutionLogsDo) FirstOrInit() (*model.PluginExecutionLogs, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PluginExecutionLogs), nil
	}
}

func (p pluginExecutionLogsDo) FirstOrCreate() (*model.PluginExecutionLogs, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PluginExecutionLogs), nil
	}
}

func (p pluginExecutionLogsDo) FindByPage(offset int, limit int) (result []*model.PluginExecutionLogs, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pluginExecutionLogsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pluginExecutionLogsDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pluginExecutionLogsDo) Delete(models ...*model.PluginExecutionLogs) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pluginExecutionLogsDo) withDO(do gen.Dao) *pluginExecutionLogsDo {
	p.DO = *do.(*gen.DO)
	return p
}
