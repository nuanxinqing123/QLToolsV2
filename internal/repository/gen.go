// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repository

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q              = new(Query)
	CdKeys         *cdKeys
	EnvPanels      *envPanels
	Envs           *envs
	LoginHistories *loginHistories
	Panels         *panels
	Users          *users
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	CdKeys = &Q.CdKeys
	EnvPanels = &Q.EnvPanels
	Envs = &Q.Envs
	LoginHistories = &Q.LoginHistories
	Panels = &Q.Panels
	Users = &Q.Users
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:             db,
		CdKeys:         newCdKeys(db, opts...),
		EnvPanels:      newEnvPanels(db, opts...),
		Envs:           newEnvs(db, opts...),
		LoginHistories: newLoginHistories(db, opts...),
		Panels:         newPanels(db, opts...),
		Users:          newUsers(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	CdKeys         cdKeys
	EnvPanels      envPanels
	Envs           envs
	LoginHistories loginHistories
	Panels         panels
	Users          users
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:             db,
		CdKeys:         q.CdKeys.clone(db),
		EnvPanels:      q.EnvPanels.clone(db),
		Envs:           q.Envs.clone(db),
		LoginHistories: q.LoginHistories.clone(db),
		Panels:         q.Panels.clone(db),
		Users:          q.Users.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:             db,
		CdKeys:         q.CdKeys.replaceDB(db),
		EnvPanels:      q.EnvPanels.replaceDB(db),
		Envs:           q.Envs.replaceDB(db),
		LoginHistories: q.LoginHistories.replaceDB(db),
		Panels:         q.Panels.replaceDB(db),
		Users:          q.Users.replaceDB(db),
	}
}

type queryCtx struct {
	CdKeys         ICdKeysDo
	EnvPanels      IEnvPanelsDo
	Envs           IEnvsDo
	LoginHistories ILoginHistoriesDo
	Panels         IPanelsDo
	Users          IUsersDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		CdKeys:         q.CdKeys.WithContext(ctx),
		EnvPanels:      q.EnvPanels.WithContext(ctx),
		Envs:           q.Envs.WithContext(ctx),
		LoginHistories: q.LoginHistories.WithContext(ctx),
		Panels:         q.Panels.WithContext(ctx),
		Users:          q.Users.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
