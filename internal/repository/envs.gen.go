// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repository

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/nuanxinqing123/QLToolsV2/internal/model"
)

func newEnvs(db *gorm.DB, opts ...gen.DOOption) envs {
	_envs := envs{}

	_envs.envsDo.UseDB(db, opts...)
	_envs.envsDo.UseModel(&model.Envs{})

	tableName := _envs.envsDo.TableName()
	_envs.ALL = field.NewAsterisk(tableName)
	_envs.ID = field.NewInt64(tableName, "id")
	_envs.CreatedAt = field.NewTime(tableName, "created_at")
	_envs.UpdatedAt = field.NewTime(tableName, "updated_at")
	_envs.DeletedAt = field.NewField(tableName, "deleted_at")
	_envs.Name = field.NewString(tableName, "name")
	_envs.Remarks = field.NewString(tableName, "remarks")
	_envs.Quantity = field.NewInt32(tableName, "quantity")
	_envs.Regex = field.NewString(tableName, "regex")
	_envs.Mode = field.NewInt32(tableName, "mode")
	_envs.RegexUpdate = field.NewString(tableName, "regex_update")
	_envs.IsAutoEnvEnable = field.NewBool(tableName, "is_auto_env_enable")
	_envs.EnableKey = field.NewBool(tableName, "enable_key")
	_envs.CdkLimit = field.NewInt32(tableName, "cdk_limit")
	_envs.IsPrompt = field.NewBool(tableName, "is_prompt")
	_envs.PromptLevel = field.NewString(tableName, "prompt_level")
	_envs.PromptContent = field.NewString(tableName, "prompt_content")
	_envs.IsEnable = field.NewBool(tableName, "is_enable")

	_envs.fillFieldMap()

	return _envs
}

// envs Env 变量数据
type envs struct {
	envsDo

	ALL             field.Asterisk
	ID              field.Int64  // 主键ID
	CreatedAt       field.Time   // 创建时间
	UpdatedAt       field.Time   // 更新时间
	DeletedAt       field.Field  // 删除时间
	Name            field.String // 名称
	Remarks         field.String // 备注
	Quantity        field.Int32  // 负载数量
	Regex           field.String // 匹配正则
	Mode            field.Int32  // 模式
	RegexUpdate     field.String // 匹配正则[更新]
	IsAutoEnvEnable field.Bool   // 是否自动启用提交的变量
	EnableKey       field.Bool   // 是否启用KEY
	CdkLimit        field.Int32  // 单次消耗卡密额度
	IsPrompt        field.Bool   // 是否提示
	PromptLevel     field.String // 提示等级
	PromptContent   field.String // 提示内容
	IsEnable        field.Bool   // 是否启用

	fieldMap map[string]field.Expr
}

func (e envs) Table(newTableName string) *envs {
	e.envsDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e envs) As(alias string) *envs {
	e.envsDo.DO = *(e.envsDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *envs) updateTableName(table string) *envs {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt64(table, "id")
	e.CreatedAt = field.NewTime(table, "created_at")
	e.UpdatedAt = field.NewTime(table, "updated_at")
	e.DeletedAt = field.NewField(table, "deleted_at")
	e.Name = field.NewString(table, "name")
	e.Remarks = field.NewString(table, "remarks")
	e.Quantity = field.NewInt32(table, "quantity")
	e.Regex = field.NewString(table, "regex")
	e.Mode = field.NewInt32(table, "mode")
	e.RegexUpdate = field.NewString(table, "regex_update")
	e.IsAutoEnvEnable = field.NewBool(table, "is_auto_env_enable")
	e.EnableKey = field.NewBool(table, "enable_key")
	e.CdkLimit = field.NewInt32(table, "cdk_limit")
	e.IsPrompt = field.NewBool(table, "is_prompt")
	e.PromptLevel = field.NewString(table, "prompt_level")
	e.PromptContent = field.NewString(table, "prompt_content")
	e.IsEnable = field.NewBool(table, "is_enable")

	e.fillFieldMap()

	return e
}

func (e *envs) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *envs) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 17)
	e.fieldMap["id"] = e.ID
	e.fieldMap["created_at"] = e.CreatedAt
	e.fieldMap["updated_at"] = e.UpdatedAt
	e.fieldMap["deleted_at"] = e.DeletedAt
	e.fieldMap["name"] = e.Name
	e.fieldMap["remarks"] = e.Remarks
	e.fieldMap["quantity"] = e.Quantity
	e.fieldMap["regex"] = e.Regex
	e.fieldMap["mode"] = e.Mode
	e.fieldMap["regex_update"] = e.RegexUpdate
	e.fieldMap["is_auto_env_enable"] = e.IsAutoEnvEnable
	e.fieldMap["enable_key"] = e.EnableKey
	e.fieldMap["cdk_limit"] = e.CdkLimit
	e.fieldMap["is_prompt"] = e.IsPrompt
	e.fieldMap["prompt_level"] = e.PromptLevel
	e.fieldMap["prompt_content"] = e.PromptContent
	e.fieldMap["is_enable"] = e.IsEnable
}

func (e envs) clone(db *gorm.DB) envs {
	e.envsDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e envs) replaceDB(db *gorm.DB) envs {
	e.envsDo.ReplaceDB(db)
	return e
}

type envsDo struct{ gen.DO }

type IEnvsDo interface {
	gen.SubQuery
	Debug() IEnvsDo
	WithContext(ctx context.Context) IEnvsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEnvsDo
	WriteDB() IEnvsDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEnvsDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEnvsDo
	Not(conds ...gen.Condition) IEnvsDo
	Or(conds ...gen.Condition) IEnvsDo
	Select(conds ...field.Expr) IEnvsDo
	Where(conds ...gen.Condition) IEnvsDo
	Order(conds ...field.Expr) IEnvsDo
	Distinct(cols ...field.Expr) IEnvsDo
	Omit(cols ...field.Expr) IEnvsDo
	Join(table schema.Tabler, on ...field.Expr) IEnvsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEnvsDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEnvsDo
	Group(cols ...field.Expr) IEnvsDo
	Having(conds ...gen.Condition) IEnvsDo
	Limit(limit int) IEnvsDo
	Offset(offset int) IEnvsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEnvsDo
	Unscoped() IEnvsDo
	Create(values ...*model.Envs) error
	CreateInBatches(values []*model.Envs, batchSize int) error
	Save(values ...*model.Envs) error
	First() (*model.Envs, error)
	Take() (*model.Envs, error)
	Last() (*model.Envs, error)
	Find() ([]*model.Envs, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Envs, err error)
	FindInBatches(result *[]*model.Envs, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Envs) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEnvsDo
	Assign(attrs ...field.AssignExpr) IEnvsDo
	Joins(fields ...field.RelationField) IEnvsDo
	Preload(fields ...field.RelationField) IEnvsDo
	FirstOrInit() (*model.Envs, error)
	FirstOrCreate() (*model.Envs, error)
	FindByPage(offset int, limit int) (result []*model.Envs, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEnvsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e envsDo) Debug() IEnvsDo {
	return e.withDO(e.DO.Debug())
}

func (e envsDo) WithContext(ctx context.Context) IEnvsDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e envsDo) ReadDB() IEnvsDo {
	return e.Clauses(dbresolver.Read)
}

func (e envsDo) WriteDB() IEnvsDo {
	return e.Clauses(dbresolver.Write)
}

func (e envsDo) Session(config *gorm.Session) IEnvsDo {
	return e.withDO(e.DO.Session(config))
}

func (e envsDo) Clauses(conds ...clause.Expression) IEnvsDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e envsDo) Returning(value interface{}, columns ...string) IEnvsDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e envsDo) Not(conds ...gen.Condition) IEnvsDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e envsDo) Or(conds ...gen.Condition) IEnvsDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e envsDo) Select(conds ...field.Expr) IEnvsDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e envsDo) Where(conds ...gen.Condition) IEnvsDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e envsDo) Order(conds ...field.Expr) IEnvsDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e envsDo) Distinct(cols ...field.Expr) IEnvsDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e envsDo) Omit(cols ...field.Expr) IEnvsDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e envsDo) Join(table schema.Tabler, on ...field.Expr) IEnvsDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e envsDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEnvsDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e envsDo) RightJoin(table schema.Tabler, on ...field.Expr) IEnvsDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e envsDo) Group(cols ...field.Expr) IEnvsDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e envsDo) Having(conds ...gen.Condition) IEnvsDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e envsDo) Limit(limit int) IEnvsDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e envsDo) Offset(offset int) IEnvsDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e envsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEnvsDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e envsDo) Unscoped() IEnvsDo {
	return e.withDO(e.DO.Unscoped())
}

func (e envsDo) Create(values ...*model.Envs) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e envsDo) CreateInBatches(values []*model.Envs, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e envsDo) Save(values ...*model.Envs) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e envsDo) First() (*model.Envs, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Envs), nil
	}
}

func (e envsDo) Take() (*model.Envs, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Envs), nil
	}
}

func (e envsDo) Last() (*model.Envs, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Envs), nil
	}
}

func (e envsDo) Find() ([]*model.Envs, error) {
	result, err := e.DO.Find()
	return result.([]*model.Envs), err
}

func (e envsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Envs, err error) {
	buf := make([]*model.Envs, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e envsDo) FindInBatches(result *[]*model.Envs, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e envsDo) Attrs(attrs ...field.AssignExpr) IEnvsDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e envsDo) Assign(attrs ...field.AssignExpr) IEnvsDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e envsDo) Joins(fields ...field.RelationField) IEnvsDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e envsDo) Preload(fields ...field.RelationField) IEnvsDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e envsDo) FirstOrInit() (*model.Envs, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Envs), nil
	}
}

func (e envsDo) FirstOrCreate() (*model.Envs, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Envs), nil
	}
}

func (e envsDo) FindByPage(offset int, limit int) (result []*model.Envs, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e envsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e envsDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e envsDo) Delete(models ...*model.Envs) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *envsDo) withDO(do gen.Dao) *envsDo {
	e.DO = *do.(*gen.DO)
	return e
}
