// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repository

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/nuanxinqing123/QLToolsV2/internal/model"
)

func newPlugins(db *gorm.DB, opts ...gen.DOOption) plugins {
	_plugins := plugins{}

	_plugins.pluginsDo.UseDB(db, opts...)
	_plugins.pluginsDo.UseModel(&model.Plugins{})

	tableName := _plugins.pluginsDo.TableName()
	_plugins.ALL = field.NewAsterisk(tableName)
	_plugins.ID = field.NewInt64(tableName, "id")
	_plugins.CreatedAt = field.NewTime(tableName, "created_at")
	_plugins.UpdatedAt = field.NewTime(tableName, "updated_at")
	_plugins.Name = field.NewString(tableName, "name")
	_plugins.Description = field.NewString(tableName, "description")
	_plugins.Version = field.NewString(tableName, "version")
	_plugins.Author = field.NewString(tableName, "author")
	_plugins.ScriptContent = field.NewString(tableName, "script_content")
	_plugins.IsEnable = field.NewBool(tableName, "is_enable")
	_plugins.ExecutionTimeout = field.NewInt32(tableName, "execution_timeout")
	_plugins.Category = field.NewString(tableName, "category")

	_plugins.fillFieldMap()

	return _plugins
}

// plugins 插件表
type plugins struct {
	pluginsDo

	ALL              field.Asterisk
	ID               field.Int64  // 主键ID
	CreatedAt        field.Time   // 创建时间
	UpdatedAt        field.Time   // 更新时间
	Name             field.String // 插件名称
	Description      field.String // 插件描述
	Version          field.String // 插件版本
	Author           field.String // 插件作者
	ScriptContent    field.String // JavaScript脚本内容
	IsEnable         field.Bool   // 是否启用
	ExecutionTimeout field.Int32  // 执行超时时间(毫秒)
	Category         field.String // 插件类别(validator:验证器,processor:处理器)

	fieldMap map[string]field.Expr
}

func (p plugins) Table(newTableName string) *plugins {
	p.pluginsDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p plugins) As(alias string) *plugins {
	p.pluginsDo.DO = *(p.pluginsDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *plugins) updateTableName(table string) *plugins {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.Name = field.NewString(table, "name")
	p.Description = field.NewString(table, "description")
	p.Version = field.NewString(table, "version")
	p.Author = field.NewString(table, "author")
	p.ScriptContent = field.NewString(table, "script_content")
	p.IsEnable = field.NewBool(table, "is_enable")
	p.ExecutionTimeout = field.NewInt32(table, "execution_timeout")
	p.Category = field.NewString(table, "category")

	p.fillFieldMap()

	return p
}

func (p *plugins) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *plugins) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 11)
	p.fieldMap["id"] = p.ID
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["name"] = p.Name
	p.fieldMap["description"] = p.Description
	p.fieldMap["version"] = p.Version
	p.fieldMap["author"] = p.Author
	p.fieldMap["script_content"] = p.ScriptContent
	p.fieldMap["is_enable"] = p.IsEnable
	p.fieldMap["execution_timeout"] = p.ExecutionTimeout
	p.fieldMap["category"] = p.Category
}

func (p plugins) clone(db *gorm.DB) plugins {
	p.pluginsDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p plugins) replaceDB(db *gorm.DB) plugins {
	p.pluginsDo.ReplaceDB(db)
	return p
}

type pluginsDo struct{ gen.DO }

type IPluginsDo interface {
	gen.SubQuery
	Debug() IPluginsDo
	WithContext(ctx context.Context) IPluginsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPluginsDo
	WriteDB() IPluginsDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPluginsDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPluginsDo
	Not(conds ...gen.Condition) IPluginsDo
	Or(conds ...gen.Condition) IPluginsDo
	Select(conds ...field.Expr) IPluginsDo
	Where(conds ...gen.Condition) IPluginsDo
	Order(conds ...field.Expr) IPluginsDo
	Distinct(cols ...field.Expr) IPluginsDo
	Omit(cols ...field.Expr) IPluginsDo
	Join(table schema.Tabler, on ...field.Expr) IPluginsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPluginsDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPluginsDo
	Group(cols ...field.Expr) IPluginsDo
	Having(conds ...gen.Condition) IPluginsDo
	Limit(limit int) IPluginsDo
	Offset(offset int) IPluginsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPluginsDo
	Unscoped() IPluginsDo
	Create(values ...*model.Plugins) error
	CreateInBatches(values []*model.Plugins, batchSize int) error
	Save(values ...*model.Plugins) error
	First() (*model.Plugins, error)
	Take() (*model.Plugins, error)
	Last() (*model.Plugins, error)
	Find() ([]*model.Plugins, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Plugins, err error)
	FindInBatches(result *[]*model.Plugins, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Plugins) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPluginsDo
	Assign(attrs ...field.AssignExpr) IPluginsDo
	Joins(fields ...field.RelationField) IPluginsDo
	Preload(fields ...field.RelationField) IPluginsDo
	FirstOrInit() (*model.Plugins, error)
	FirstOrCreate() (*model.Plugins, error)
	FindByPage(offset int, limit int) (result []*model.Plugins, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPluginsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p pluginsDo) Debug() IPluginsDo {
	return p.withDO(p.DO.Debug())
}

func (p pluginsDo) WithContext(ctx context.Context) IPluginsDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pluginsDo) ReadDB() IPluginsDo {
	return p.Clauses(dbresolver.Read)
}

func (p pluginsDo) WriteDB() IPluginsDo {
	return p.Clauses(dbresolver.Write)
}

func (p pluginsDo) Session(config *gorm.Session) IPluginsDo {
	return p.withDO(p.DO.Session(config))
}

func (p pluginsDo) Clauses(conds ...clause.Expression) IPluginsDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pluginsDo) Returning(value interface{}, columns ...string) IPluginsDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pluginsDo) Not(conds ...gen.Condition) IPluginsDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pluginsDo) Or(conds ...gen.Condition) IPluginsDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pluginsDo) Select(conds ...field.Expr) IPluginsDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pluginsDo) Where(conds ...gen.Condition) IPluginsDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pluginsDo) Order(conds ...field.Expr) IPluginsDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pluginsDo) Distinct(cols ...field.Expr) IPluginsDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pluginsDo) Omit(cols ...field.Expr) IPluginsDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pluginsDo) Join(table schema.Tabler, on ...field.Expr) IPluginsDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pluginsDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPluginsDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pluginsDo) RightJoin(table schema.Tabler, on ...field.Expr) IPluginsDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pluginsDo) Group(cols ...field.Expr) IPluginsDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pluginsDo) Having(conds ...gen.Condition) IPluginsDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pluginsDo) Limit(limit int) IPluginsDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pluginsDo) Offset(offset int) IPluginsDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pluginsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPluginsDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pluginsDo) Unscoped() IPluginsDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pluginsDo) Create(values ...*model.Plugins) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pluginsDo) CreateInBatches(values []*model.Plugins, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pluginsDo) Save(values ...*model.Plugins) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pluginsDo) First() (*model.Plugins, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Plugins), nil
	}
}

func (p pluginsDo) Take() (*model.Plugins, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Plugins), nil
	}
}

func (p pluginsDo) Last() (*model.Plugins, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Plugins), nil
	}
}

func (p pluginsDo) Find() ([]*model.Plugins, error) {
	result, err := p.DO.Find()
	return result.([]*model.Plugins), err
}

func (p pluginsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Plugins, err error) {
	buf := make([]*model.Plugins, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pluginsDo) FindInBatches(result *[]*model.Plugins, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pluginsDo) Attrs(attrs ...field.AssignExpr) IPluginsDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pluginsDo) Assign(attrs ...field.AssignExpr) IPluginsDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pluginsDo) Joins(fields ...field.RelationField) IPluginsDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pluginsDo) Preload(fields ...field.RelationField) IPluginsDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pluginsDo) FirstOrInit() (*model.Plugins, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Plugins), nil
	}
}

func (p pluginsDo) FirstOrCreate() (*model.Plugins, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Plugins), nil
	}
}

func (p pluginsDo) FindByPage(offset int, limit int) (result []*model.Plugins, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pluginsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pluginsDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pluginsDo) Delete(models ...*model.Plugins) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pluginsDo) withDO(do gen.Dao) *pluginsDo {
	p.DO = *do.(*gen.DO)
	return p
}
