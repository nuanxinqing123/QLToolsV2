// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repository

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/nuanxinqing123/QLToolsV2/internal/model"
)

func newEnvPanels(db *gorm.DB, opts ...gen.DOOption) envPanels {
	_envPanels := envPanels{}

	_envPanels.envPanelsDo.UseDB(db, opts...)
	_envPanels.envPanelsDo.UseModel(&model.EnvPanels{})

	tableName := _envPanels.envPanelsDo.TableName()
	_envPanels.ALL = field.NewAsterisk(tableName)
	_envPanels.EnvID = field.NewInt64(tableName, "env_id")
	_envPanels.PanelID = field.NewInt64(tableName, "panel_id")

	_envPanels.fillFieldMap()

	return _envPanels
}

// envPanels Env 与 Panel 多对多关系表
type envPanels struct {
	envPanelsDo

	ALL     field.Asterisk
	EnvID   field.Int64
	PanelID field.Int64

	fieldMap map[string]field.Expr
}

func (e envPanels) Table(newTableName string) *envPanels {
	e.envPanelsDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e envPanels) As(alias string) *envPanels {
	e.envPanelsDo.DO = *(e.envPanelsDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *envPanels) updateTableName(table string) *envPanels {
	e.ALL = field.NewAsterisk(table)
	e.EnvID = field.NewInt64(table, "env_id")
	e.PanelID = field.NewInt64(table, "panel_id")

	e.fillFieldMap()

	return e
}

func (e *envPanels) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *envPanels) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 2)
	e.fieldMap["env_id"] = e.EnvID
	e.fieldMap["panel_id"] = e.PanelID
}

func (e envPanels) clone(db *gorm.DB) envPanels {
	e.envPanelsDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e envPanels) replaceDB(db *gorm.DB) envPanels {
	e.envPanelsDo.ReplaceDB(db)
	return e
}

type envPanelsDo struct{ gen.DO }

type IEnvPanelsDo interface {
	gen.SubQuery
	Debug() IEnvPanelsDo
	WithContext(ctx context.Context) IEnvPanelsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEnvPanelsDo
	WriteDB() IEnvPanelsDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEnvPanelsDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEnvPanelsDo
	Not(conds ...gen.Condition) IEnvPanelsDo
	Or(conds ...gen.Condition) IEnvPanelsDo
	Select(conds ...field.Expr) IEnvPanelsDo
	Where(conds ...gen.Condition) IEnvPanelsDo
	Order(conds ...field.Expr) IEnvPanelsDo
	Distinct(cols ...field.Expr) IEnvPanelsDo
	Omit(cols ...field.Expr) IEnvPanelsDo
	Join(table schema.Tabler, on ...field.Expr) IEnvPanelsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEnvPanelsDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEnvPanelsDo
	Group(cols ...field.Expr) IEnvPanelsDo
	Having(conds ...gen.Condition) IEnvPanelsDo
	Limit(limit int) IEnvPanelsDo
	Offset(offset int) IEnvPanelsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEnvPanelsDo
	Unscoped() IEnvPanelsDo
	Create(values ...*model.EnvPanels) error
	CreateInBatches(values []*model.EnvPanels, batchSize int) error
	Save(values ...*model.EnvPanels) error
	First() (*model.EnvPanels, error)
	Take() (*model.EnvPanels, error)
	Last() (*model.EnvPanels, error)
	Find() ([]*model.EnvPanels, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EnvPanels, err error)
	FindInBatches(result *[]*model.EnvPanels, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.EnvPanels) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEnvPanelsDo
	Assign(attrs ...field.AssignExpr) IEnvPanelsDo
	Joins(fields ...field.RelationField) IEnvPanelsDo
	Preload(fields ...field.RelationField) IEnvPanelsDo
	FirstOrInit() (*model.EnvPanels, error)
	FirstOrCreate() (*model.EnvPanels, error)
	FindByPage(offset int, limit int) (result []*model.EnvPanels, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEnvPanelsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e envPanelsDo) Debug() IEnvPanelsDo {
	return e.withDO(e.DO.Debug())
}

func (e envPanelsDo) WithContext(ctx context.Context) IEnvPanelsDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e envPanelsDo) ReadDB() IEnvPanelsDo {
	return e.Clauses(dbresolver.Read)
}

func (e envPanelsDo) WriteDB() IEnvPanelsDo {
	return e.Clauses(dbresolver.Write)
}

func (e envPanelsDo) Session(config *gorm.Session) IEnvPanelsDo {
	return e.withDO(e.DO.Session(config))
}

func (e envPanelsDo) Clauses(conds ...clause.Expression) IEnvPanelsDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e envPanelsDo) Returning(value interface{}, columns ...string) IEnvPanelsDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e envPanelsDo) Not(conds ...gen.Condition) IEnvPanelsDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e envPanelsDo) Or(conds ...gen.Condition) IEnvPanelsDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e envPanelsDo) Select(conds ...field.Expr) IEnvPanelsDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e envPanelsDo) Where(conds ...gen.Condition) IEnvPanelsDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e envPanelsDo) Order(conds ...field.Expr) IEnvPanelsDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e envPanelsDo) Distinct(cols ...field.Expr) IEnvPanelsDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e envPanelsDo) Omit(cols ...field.Expr) IEnvPanelsDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e envPanelsDo) Join(table schema.Tabler, on ...field.Expr) IEnvPanelsDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e envPanelsDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEnvPanelsDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e envPanelsDo) RightJoin(table schema.Tabler, on ...field.Expr) IEnvPanelsDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e envPanelsDo) Group(cols ...field.Expr) IEnvPanelsDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e envPanelsDo) Having(conds ...gen.Condition) IEnvPanelsDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e envPanelsDo) Limit(limit int) IEnvPanelsDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e envPanelsDo) Offset(offset int) IEnvPanelsDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e envPanelsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEnvPanelsDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e envPanelsDo) Unscoped() IEnvPanelsDo {
	return e.withDO(e.DO.Unscoped())
}

func (e envPanelsDo) Create(values ...*model.EnvPanels) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e envPanelsDo) CreateInBatches(values []*model.EnvPanels, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e envPanelsDo) Save(values ...*model.EnvPanels) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e envPanelsDo) First() (*model.EnvPanels, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.EnvPanels), nil
	}
}

func (e envPanelsDo) Take() (*model.EnvPanels, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.EnvPanels), nil
	}
}

func (e envPanelsDo) Last() (*model.EnvPanels, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.EnvPanels), nil
	}
}

func (e envPanelsDo) Find() ([]*model.EnvPanels, error) {
	result, err := e.DO.Find()
	return result.([]*model.EnvPanels), err
}

func (e envPanelsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EnvPanels, err error) {
	buf := make([]*model.EnvPanels, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e envPanelsDo) FindInBatches(result *[]*model.EnvPanels, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e envPanelsDo) Attrs(attrs ...field.AssignExpr) IEnvPanelsDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e envPanelsDo) Assign(attrs ...field.AssignExpr) IEnvPanelsDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e envPanelsDo) Joins(fields ...field.RelationField) IEnvPanelsDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e envPanelsDo) Preload(fields ...field.RelationField) IEnvPanelsDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e envPanelsDo) FirstOrInit() (*model.EnvPanels, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.EnvPanels), nil
	}
}

func (e envPanelsDo) FirstOrCreate() (*model.EnvPanels, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.EnvPanels), nil
	}
}

func (e envPanelsDo) FindByPage(offset int, limit int) (result []*model.EnvPanels, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e envPanelsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e envPanelsDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e envPanelsDo) Delete(models ...*model.EnvPanels) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *envPanelsDo) withDO(do gen.Dao) *envPanelsDo {
	e.DO = *do.(*gen.DO)
	return e
}
