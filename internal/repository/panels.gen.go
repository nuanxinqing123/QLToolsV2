// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repository

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/nuanxinqing123/QLToolsV2/internal/model"
)

func newPanels(db *gorm.DB, opts ...gen.DOOption) panels {
	_panels := panels{}

	_panels.panelsDo.UseDB(db, opts...)
	_panels.panelsDo.UseModel(&model.Panels{})

	tableName := _panels.panelsDo.TableName()
	_panels.ALL = field.NewAsterisk(tableName)
	_panels.ID = field.NewInt64(tableName, "id")
	_panels.CreatedAt = field.NewTime(tableName, "created_at")
	_panels.UpdatedAt = field.NewTime(tableName, "updated_at")
	_panels.DeletedAt = field.NewField(tableName, "deleted_at")
	_panels.Name = field.NewString(tableName, "name")
	_panels.URL = field.NewString(tableName, "url")
	_panels.ClientID = field.NewString(tableName, "client_id")
	_panels.ClientSecret = field.NewString(tableName, "client_secret")
	_panels.IsEnable = field.NewBool(tableName, "is_enable")
	_panels.Token = field.NewString(tableName, "token")
	_panels.Params = field.NewInt32(tableName, "params")

	_panels.fillFieldMap()

	return _panels
}

// panels Panel 面板数据
type panels struct {
	panelsDo

	ALL          field.Asterisk
	ID           field.Int64  // 主键ID
	CreatedAt    field.Time   // 创建时间
	UpdatedAt    field.Time   // 更新时间
	DeletedAt    field.Field  // 删除时间
	Name         field.String // 名称
	URL          field.String // 连接地址
	ClientID     field.String // Client_ID
	ClientSecret field.String // Client_Secret
	IsEnable     field.Bool   // 是否启用
	Token        field.String // Token
	Params       field.Int32  // Params

	fieldMap map[string]field.Expr
}

func (p panels) Table(newTableName string) *panels {
	p.panelsDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p panels) As(alias string) *panels {
	p.panelsDo.DO = *(p.panelsDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *panels) updateTableName(table string) *panels {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")
	p.Name = field.NewString(table, "name")
	p.URL = field.NewString(table, "url")
	p.ClientID = field.NewString(table, "client_id")
	p.ClientSecret = field.NewString(table, "client_secret")
	p.IsEnable = field.NewBool(table, "is_enable")
	p.Token = field.NewString(table, "token")
	p.Params = field.NewInt32(table, "params")

	p.fillFieldMap()

	return p
}

func (p *panels) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *panels) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 11)
	p.fieldMap["id"] = p.ID
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
	p.fieldMap["name"] = p.Name
	p.fieldMap["url"] = p.URL
	p.fieldMap["client_id"] = p.ClientID
	p.fieldMap["client_secret"] = p.ClientSecret
	p.fieldMap["is_enable"] = p.IsEnable
	p.fieldMap["token"] = p.Token
	p.fieldMap["params"] = p.Params
}

func (p panels) clone(db *gorm.DB) panels {
	p.panelsDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p panels) replaceDB(db *gorm.DB) panels {
	p.panelsDo.ReplaceDB(db)
	return p
}

type panelsDo struct{ gen.DO }

type IPanelsDo interface {
	gen.SubQuery
	Debug() IPanelsDo
	WithContext(ctx context.Context) IPanelsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPanelsDo
	WriteDB() IPanelsDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPanelsDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPanelsDo
	Not(conds ...gen.Condition) IPanelsDo
	Or(conds ...gen.Condition) IPanelsDo
	Select(conds ...field.Expr) IPanelsDo
	Where(conds ...gen.Condition) IPanelsDo
	Order(conds ...field.Expr) IPanelsDo
	Distinct(cols ...field.Expr) IPanelsDo
	Omit(cols ...field.Expr) IPanelsDo
	Join(table schema.Tabler, on ...field.Expr) IPanelsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPanelsDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPanelsDo
	Group(cols ...field.Expr) IPanelsDo
	Having(conds ...gen.Condition) IPanelsDo
	Limit(limit int) IPanelsDo
	Offset(offset int) IPanelsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPanelsDo
	Unscoped() IPanelsDo
	Create(values ...*model.Panels) error
	CreateInBatches(values []*model.Panels, batchSize int) error
	Save(values ...*model.Panels) error
	First() (*model.Panels, error)
	Take() (*model.Panels, error)
	Last() (*model.Panels, error)
	Find() ([]*model.Panels, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Panels, err error)
	FindInBatches(result *[]*model.Panels, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Panels) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPanelsDo
	Assign(attrs ...field.AssignExpr) IPanelsDo
	Joins(fields ...field.RelationField) IPanelsDo
	Preload(fields ...field.RelationField) IPanelsDo
	FirstOrInit() (*model.Panels, error)
	FirstOrCreate() (*model.Panels, error)
	FindByPage(offset int, limit int) (result []*model.Panels, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPanelsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p panelsDo) Debug() IPanelsDo {
	return p.withDO(p.DO.Debug())
}

func (p panelsDo) WithContext(ctx context.Context) IPanelsDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p panelsDo) ReadDB() IPanelsDo {
	return p.Clauses(dbresolver.Read)
}

func (p panelsDo) WriteDB() IPanelsDo {
	return p.Clauses(dbresolver.Write)
}

func (p panelsDo) Session(config *gorm.Session) IPanelsDo {
	return p.withDO(p.DO.Session(config))
}

func (p panelsDo) Clauses(conds ...clause.Expression) IPanelsDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p panelsDo) Returning(value interface{}, columns ...string) IPanelsDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p panelsDo) Not(conds ...gen.Condition) IPanelsDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p panelsDo) Or(conds ...gen.Condition) IPanelsDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p panelsDo) Select(conds ...field.Expr) IPanelsDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p panelsDo) Where(conds ...gen.Condition) IPanelsDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p panelsDo) Order(conds ...field.Expr) IPanelsDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p panelsDo) Distinct(cols ...field.Expr) IPanelsDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p panelsDo) Omit(cols ...field.Expr) IPanelsDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p panelsDo) Join(table schema.Tabler, on ...field.Expr) IPanelsDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p panelsDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPanelsDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p panelsDo) RightJoin(table schema.Tabler, on ...field.Expr) IPanelsDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p panelsDo) Group(cols ...field.Expr) IPanelsDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p panelsDo) Having(conds ...gen.Condition) IPanelsDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p panelsDo) Limit(limit int) IPanelsDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p panelsDo) Offset(offset int) IPanelsDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p panelsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPanelsDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p panelsDo) Unscoped() IPanelsDo {
	return p.withDO(p.DO.Unscoped())
}

func (p panelsDo) Create(values ...*model.Panels) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p panelsDo) CreateInBatches(values []*model.Panels, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p panelsDo) Save(values ...*model.Panels) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p panelsDo) First() (*model.Panels, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Panels), nil
	}
}

func (p panelsDo) Take() (*model.Panels, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Panels), nil
	}
}

func (p panelsDo) Last() (*model.Panels, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Panels), nil
	}
}

func (p panelsDo) Find() ([]*model.Panels, error) {
	result, err := p.DO.Find()
	return result.([]*model.Panels), err
}

func (p panelsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Panels, err error) {
	buf := make([]*model.Panels, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p panelsDo) FindInBatches(result *[]*model.Panels, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p panelsDo) Attrs(attrs ...field.AssignExpr) IPanelsDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p panelsDo) Assign(attrs ...field.AssignExpr) IPanelsDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p panelsDo) Joins(fields ...field.RelationField) IPanelsDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p panelsDo) Preload(fields ...field.RelationField) IPanelsDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p panelsDo) FirstOrInit() (*model.Panels, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Panels), nil
	}
}

func (p panelsDo) FirstOrCreate() (*model.Panels, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Panels), nil
	}
}

func (p panelsDo) FindByPage(offset int, limit int) (result []*model.Panels, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p panelsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p panelsDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p panelsDo) Delete(models ...*model.Panels) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *panelsDo) withDO(do gen.Dao) *panelsDo {
	p.DO = *do.(*gen.DO)
	return p
}
