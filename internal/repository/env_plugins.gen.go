// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repository

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/nuanxinqing123/QLToolsV2/internal/model"
)

func newEnvPlugins(db *gorm.DB, opts ...gen.DOOption) envPlugins {
	_envPlugins := envPlugins{}

	_envPlugins.envPluginsDo.UseDB(db, opts...)
	_envPlugins.envPluginsDo.UseModel(&model.EnvPlugins{})

	tableName := _envPlugins.envPluginsDo.TableName()
	_envPlugins.ALL = field.NewAsterisk(tableName)
	_envPlugins.ID = field.NewInt64(tableName, "id")
	_envPlugins.CreatedAt = field.NewTime(tableName, "created_at")
	_envPlugins.UpdatedAt = field.NewTime(tableName, "updated_at")
	_envPlugins.DeletedAt = field.NewField(tableName, "deleted_at")
	_envPlugins.EnvID = field.NewInt64(tableName, "env_id")
	_envPlugins.PluginID = field.NewInt64(tableName, "plugin_id")
	_envPlugins.IsEnable = field.NewBool(tableName, "is_enable")
	_envPlugins.ExecutionOrder = field.NewInt32(tableName, "execution_order")
	_envPlugins.Config = field.NewString(tableName, "config")

	_envPlugins.fillFieldMap()

	return _envPlugins
}

// envPlugins 环境变量插件关联表
type envPlugins struct {
	envPluginsDo

	ALL            field.Asterisk
	ID             field.Int64  // 主键ID
	CreatedAt      field.Time   // 创建时间
	UpdatedAt      field.Time   // 更新时间
	DeletedAt      field.Field  // 删除时间
	EnvID          field.Int64  // 环境变量ID
	PluginID       field.Int64  // 插件ID
	IsEnable       field.Bool   // 是否启用
	ExecutionOrder field.Int32  // 执行顺序(数字越小越先执行)
	Config         field.String // 插件配置参数

	fieldMap map[string]field.Expr
}

func (e envPlugins) Table(newTableName string) *envPlugins {
	e.envPluginsDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e envPlugins) As(alias string) *envPlugins {
	e.envPluginsDo.DO = *(e.envPluginsDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *envPlugins) updateTableName(table string) *envPlugins {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt64(table, "id")
	e.CreatedAt = field.NewTime(table, "created_at")
	e.UpdatedAt = field.NewTime(table, "updated_at")
	e.DeletedAt = field.NewField(table, "deleted_at")
	e.EnvID = field.NewInt64(table, "env_id")
	e.PluginID = field.NewInt64(table, "plugin_id")
	e.IsEnable = field.NewBool(table, "is_enable")
	e.ExecutionOrder = field.NewInt32(table, "execution_order")
	e.Config = field.NewString(table, "config")

	e.fillFieldMap()

	return e
}

func (e *envPlugins) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *envPlugins) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 9)
	e.fieldMap["id"] = e.ID
	e.fieldMap["created_at"] = e.CreatedAt
	e.fieldMap["updated_at"] = e.UpdatedAt
	e.fieldMap["deleted_at"] = e.DeletedAt
	e.fieldMap["env_id"] = e.EnvID
	e.fieldMap["plugin_id"] = e.PluginID
	e.fieldMap["is_enable"] = e.IsEnable
	e.fieldMap["execution_order"] = e.ExecutionOrder
	e.fieldMap["config"] = e.Config
}

func (e envPlugins) clone(db *gorm.DB) envPlugins {
	e.envPluginsDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e envPlugins) replaceDB(db *gorm.DB) envPlugins {
	e.envPluginsDo.ReplaceDB(db)
	return e
}

type envPluginsDo struct{ gen.DO }

type IEnvPluginsDo interface {
	gen.SubQuery
	Debug() IEnvPluginsDo
	WithContext(ctx context.Context) IEnvPluginsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEnvPluginsDo
	WriteDB() IEnvPluginsDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEnvPluginsDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEnvPluginsDo
	Not(conds ...gen.Condition) IEnvPluginsDo
	Or(conds ...gen.Condition) IEnvPluginsDo
	Select(conds ...field.Expr) IEnvPluginsDo
	Where(conds ...gen.Condition) IEnvPluginsDo
	Order(conds ...field.Expr) IEnvPluginsDo
	Distinct(cols ...field.Expr) IEnvPluginsDo
	Omit(cols ...field.Expr) IEnvPluginsDo
	Join(table schema.Tabler, on ...field.Expr) IEnvPluginsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEnvPluginsDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEnvPluginsDo
	Group(cols ...field.Expr) IEnvPluginsDo
	Having(conds ...gen.Condition) IEnvPluginsDo
	Limit(limit int) IEnvPluginsDo
	Offset(offset int) IEnvPluginsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEnvPluginsDo
	Unscoped() IEnvPluginsDo
	Create(values ...*model.EnvPlugins) error
	CreateInBatches(values []*model.EnvPlugins, batchSize int) error
	Save(values ...*model.EnvPlugins) error
	First() (*model.EnvPlugins, error)
	Take() (*model.EnvPlugins, error)
	Last() (*model.EnvPlugins, error)
	Find() ([]*model.EnvPlugins, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EnvPlugins, err error)
	FindInBatches(result *[]*model.EnvPlugins, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.EnvPlugins) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEnvPluginsDo
	Assign(attrs ...field.AssignExpr) IEnvPluginsDo
	Joins(fields ...field.RelationField) IEnvPluginsDo
	Preload(fields ...field.RelationField) IEnvPluginsDo
	FirstOrInit() (*model.EnvPlugins, error)
	FirstOrCreate() (*model.EnvPlugins, error)
	FindByPage(offset int, limit int) (result []*model.EnvPlugins, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEnvPluginsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e envPluginsDo) Debug() IEnvPluginsDo {
	return e.withDO(e.DO.Debug())
}

func (e envPluginsDo) WithContext(ctx context.Context) IEnvPluginsDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e envPluginsDo) ReadDB() IEnvPluginsDo {
	return e.Clauses(dbresolver.Read)
}

func (e envPluginsDo) WriteDB() IEnvPluginsDo {
	return e.Clauses(dbresolver.Write)
}

func (e envPluginsDo) Session(config *gorm.Session) IEnvPluginsDo {
	return e.withDO(e.DO.Session(config))
}

func (e envPluginsDo) Clauses(conds ...clause.Expression) IEnvPluginsDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e envPluginsDo) Returning(value interface{}, columns ...string) IEnvPluginsDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e envPluginsDo) Not(conds ...gen.Condition) IEnvPluginsDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e envPluginsDo) Or(conds ...gen.Condition) IEnvPluginsDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e envPluginsDo) Select(conds ...field.Expr) IEnvPluginsDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e envPluginsDo) Where(conds ...gen.Condition) IEnvPluginsDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e envPluginsDo) Order(conds ...field.Expr) IEnvPluginsDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e envPluginsDo) Distinct(cols ...field.Expr) IEnvPluginsDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e envPluginsDo) Omit(cols ...field.Expr) IEnvPluginsDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e envPluginsDo) Join(table schema.Tabler, on ...field.Expr) IEnvPluginsDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e envPluginsDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEnvPluginsDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e envPluginsDo) RightJoin(table schema.Tabler, on ...field.Expr) IEnvPluginsDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e envPluginsDo) Group(cols ...field.Expr) IEnvPluginsDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e envPluginsDo) Having(conds ...gen.Condition) IEnvPluginsDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e envPluginsDo) Limit(limit int) IEnvPluginsDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e envPluginsDo) Offset(offset int) IEnvPluginsDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e envPluginsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEnvPluginsDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e envPluginsDo) Unscoped() IEnvPluginsDo {
	return e.withDO(e.DO.Unscoped())
}

func (e envPluginsDo) Create(values ...*model.EnvPlugins) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e envPluginsDo) CreateInBatches(values []*model.EnvPlugins, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e envPluginsDo) Save(values ...*model.EnvPlugins) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e envPluginsDo) First() (*model.EnvPlugins, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.EnvPlugins), nil
	}
}

func (e envPluginsDo) Take() (*model.EnvPlugins, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.EnvPlugins), nil
	}
}

func (e envPluginsDo) Last() (*model.EnvPlugins, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.EnvPlugins), nil
	}
}

func (e envPluginsDo) Find() ([]*model.EnvPlugins, error) {
	result, err := e.DO.Find()
	return result.([]*model.EnvPlugins), err
}

func (e envPluginsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EnvPlugins, err error) {
	buf := make([]*model.EnvPlugins, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e envPluginsDo) FindInBatches(result *[]*model.EnvPlugins, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e envPluginsDo) Attrs(attrs ...field.AssignExpr) IEnvPluginsDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e envPluginsDo) Assign(attrs ...field.AssignExpr) IEnvPluginsDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e envPluginsDo) Joins(fields ...field.RelationField) IEnvPluginsDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e envPluginsDo) Preload(fields ...field.RelationField) IEnvPluginsDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e envPluginsDo) FirstOrInit() (*model.EnvPlugins, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.EnvPlugins), nil
	}
}

func (e envPluginsDo) FirstOrCreate() (*model.EnvPlugins, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.EnvPlugins), nil
	}
}

func (e envPluginsDo) FindByPage(offset int, limit int) (result []*model.EnvPlugins, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e envPluginsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e envPluginsDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e envPluginsDo) Delete(models ...*model.EnvPlugins) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *envPluginsDo) withDO(do gen.Dao) *envPluginsDo {
	e.DO = *do.(*gen.DO)
	return e
}
