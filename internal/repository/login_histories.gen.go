// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repository

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/nuanxinqing123/QLToolsV2/internal/model"
)

func newLoginHistories(db *gorm.DB, opts ...gen.DOOption) loginHistories {
	_loginHistories := loginHistories{}

	_loginHistories.loginHistoriesDo.UseDB(db, opts...)
	_loginHistories.loginHistoriesDo.UseModel(&model.LoginHistories{})

	tableName := _loginHistories.loginHistoriesDo.TableName()
	_loginHistories.ALL = field.NewAsterisk(tableName)
	_loginHistories.ID = field.NewInt64(tableName, "id")
	_loginHistories.CreatedAt = field.NewTime(tableName, "created_at")
	_loginHistories.UpdatedAt = field.NewTime(tableName, "updated_at")
	_loginHistories.IP = field.NewString(tableName, "ip")
	_loginHistories.Address = field.NewString(tableName, "address")
	_loginHistories.State = field.NewBool(tableName, "state")

	_loginHistories.fillFieldMap()

	return _loginHistories
}

// loginHistories LoginHistory 登录历史
type loginHistories struct {
	loginHistoriesDo

	ALL       field.Asterisk
	ID        field.Int64  // 主键ID
	CreatedAt field.Time   // 创建时间
	UpdatedAt field.Time   // 更新时间
	IP        field.String // IP地址
	Address   field.String // 物理地址
	State     field.Bool   // 状态 0:失败 1:成功

	fieldMap map[string]field.Expr
}

func (l loginHistories) Table(newTableName string) *loginHistories {
	l.loginHistoriesDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l loginHistories) As(alias string) *loginHistories {
	l.loginHistoriesDo.DO = *(l.loginHistoriesDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *loginHistories) updateTableName(table string) *loginHistories {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewInt64(table, "id")
	l.CreatedAt = field.NewTime(table, "created_at")
	l.UpdatedAt = field.NewTime(table, "updated_at")
	l.IP = field.NewString(table, "ip")
	l.Address = field.NewString(table, "address")
	l.State = field.NewBool(table, "state")

	l.fillFieldMap()

	return l
}

func (l *loginHistories) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *loginHistories) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 6)
	l.fieldMap["id"] = l.ID
	l.fieldMap["created_at"] = l.CreatedAt
	l.fieldMap["updated_at"] = l.UpdatedAt
	l.fieldMap["ip"] = l.IP
	l.fieldMap["address"] = l.Address
	l.fieldMap["state"] = l.State
}

func (l loginHistories) clone(db *gorm.DB) loginHistories {
	l.loginHistoriesDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l loginHistories) replaceDB(db *gorm.DB) loginHistories {
	l.loginHistoriesDo.ReplaceDB(db)
	return l
}

type loginHistoriesDo struct{ gen.DO }

type ILoginHistoriesDo interface {
	gen.SubQuery
	Debug() ILoginHistoriesDo
	WithContext(ctx context.Context) ILoginHistoriesDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ILoginHistoriesDo
	WriteDB() ILoginHistoriesDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ILoginHistoriesDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILoginHistoriesDo
	Not(conds ...gen.Condition) ILoginHistoriesDo
	Or(conds ...gen.Condition) ILoginHistoriesDo
	Select(conds ...field.Expr) ILoginHistoriesDo
	Where(conds ...gen.Condition) ILoginHistoriesDo
	Order(conds ...field.Expr) ILoginHistoriesDo
	Distinct(cols ...field.Expr) ILoginHistoriesDo
	Omit(cols ...field.Expr) ILoginHistoriesDo
	Join(table schema.Tabler, on ...field.Expr) ILoginHistoriesDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILoginHistoriesDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILoginHistoriesDo
	Group(cols ...field.Expr) ILoginHistoriesDo
	Having(conds ...gen.Condition) ILoginHistoriesDo
	Limit(limit int) ILoginHistoriesDo
	Offset(offset int) ILoginHistoriesDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILoginHistoriesDo
	Unscoped() ILoginHistoriesDo
	Create(values ...*model.LoginHistories) error
	CreateInBatches(values []*model.LoginHistories, batchSize int) error
	Save(values ...*model.LoginHistories) error
	First() (*model.LoginHistories, error)
	Take() (*model.LoginHistories, error)
	Last() (*model.LoginHistories, error)
	Find() ([]*model.LoginHistories, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LoginHistories, err error)
	FindInBatches(result *[]*model.LoginHistories, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.LoginHistories) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILoginHistoriesDo
	Assign(attrs ...field.AssignExpr) ILoginHistoriesDo
	Joins(fields ...field.RelationField) ILoginHistoriesDo
	Preload(fields ...field.RelationField) ILoginHistoriesDo
	FirstOrInit() (*model.LoginHistories, error)
	FirstOrCreate() (*model.LoginHistories, error)
	FindByPage(offset int, limit int) (result []*model.LoginHistories, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILoginHistoriesDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l loginHistoriesDo) Debug() ILoginHistoriesDo {
	return l.withDO(l.DO.Debug())
}

func (l loginHistoriesDo) WithContext(ctx context.Context) ILoginHistoriesDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l loginHistoriesDo) ReadDB() ILoginHistoriesDo {
	return l.Clauses(dbresolver.Read)
}

func (l loginHistoriesDo) WriteDB() ILoginHistoriesDo {
	return l.Clauses(dbresolver.Write)
}

func (l loginHistoriesDo) Session(config *gorm.Session) ILoginHistoriesDo {
	return l.withDO(l.DO.Session(config))
}

func (l loginHistoriesDo) Clauses(conds ...clause.Expression) ILoginHistoriesDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l loginHistoriesDo) Returning(value interface{}, columns ...string) ILoginHistoriesDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l loginHistoriesDo) Not(conds ...gen.Condition) ILoginHistoriesDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l loginHistoriesDo) Or(conds ...gen.Condition) ILoginHistoriesDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l loginHistoriesDo) Select(conds ...field.Expr) ILoginHistoriesDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l loginHistoriesDo) Where(conds ...gen.Condition) ILoginHistoriesDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l loginHistoriesDo) Order(conds ...field.Expr) ILoginHistoriesDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l loginHistoriesDo) Distinct(cols ...field.Expr) ILoginHistoriesDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l loginHistoriesDo) Omit(cols ...field.Expr) ILoginHistoriesDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l loginHistoriesDo) Join(table schema.Tabler, on ...field.Expr) ILoginHistoriesDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l loginHistoriesDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILoginHistoriesDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l loginHistoriesDo) RightJoin(table schema.Tabler, on ...field.Expr) ILoginHistoriesDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l loginHistoriesDo) Group(cols ...field.Expr) ILoginHistoriesDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l loginHistoriesDo) Having(conds ...gen.Condition) ILoginHistoriesDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l loginHistoriesDo) Limit(limit int) ILoginHistoriesDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l loginHistoriesDo) Offset(offset int) ILoginHistoriesDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l loginHistoriesDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILoginHistoriesDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l loginHistoriesDo) Unscoped() ILoginHistoriesDo {
	return l.withDO(l.DO.Unscoped())
}

func (l loginHistoriesDo) Create(values ...*model.LoginHistories) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l loginHistoriesDo) CreateInBatches(values []*model.LoginHistories, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l loginHistoriesDo) Save(values ...*model.LoginHistories) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l loginHistoriesDo) First() (*model.LoginHistories, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.LoginHistories), nil
	}
}

func (l loginHistoriesDo) Take() (*model.LoginHistories, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.LoginHistories), nil
	}
}

func (l loginHistoriesDo) Last() (*model.LoginHistories, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.LoginHistories), nil
	}
}

func (l loginHistoriesDo) Find() ([]*model.LoginHistories, error) {
	result, err := l.DO.Find()
	return result.([]*model.LoginHistories), err
}

func (l loginHistoriesDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LoginHistories, err error) {
	buf := make([]*model.LoginHistories, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l loginHistoriesDo) FindInBatches(result *[]*model.LoginHistories, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l loginHistoriesDo) Attrs(attrs ...field.AssignExpr) ILoginHistoriesDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l loginHistoriesDo) Assign(attrs ...field.AssignExpr) ILoginHistoriesDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l loginHistoriesDo) Joins(fields ...field.RelationField) ILoginHistoriesDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l loginHistoriesDo) Preload(fields ...field.RelationField) ILoginHistoriesDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l loginHistoriesDo) FirstOrInit() (*model.LoginHistories, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.LoginHistories), nil
	}
}

func (l loginHistoriesDo) FirstOrCreate() (*model.LoginHistories, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.LoginHistories), nil
	}
}

func (l loginHistoriesDo) FindByPage(offset int, limit int) (result []*model.LoginHistories, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l loginHistoriesDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l loginHistoriesDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l loginHistoriesDo) Delete(models ...*model.LoginHistories) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *loginHistoriesDo) withDO(do gen.Dao) *loginHistoriesDo {
	l.DO = *do.(*gen.DO)
	return l
}
