// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repository

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/nuanxinqing123/QLToolsV2/internal/model"
)

func newCdKeys(db *gorm.DB, opts ...gen.DOOption) cdKeys {
	_cdKeys := cdKeys{}

	_cdKeys.cdKeysDo.UseDB(db, opts...)
	_cdKeys.cdKeysDo.UseModel(&model.CdKeys{})

	tableName := _cdKeys.cdKeysDo.TableName()
	_cdKeys.ALL = field.NewAsterisk(tableName)
	_cdKeys.ID = field.NewInt64(tableName, "id")
	_cdKeys.CreatedAt = field.NewTime(tableName, "created_at")
	_cdKeys.UpdatedAt = field.NewTime(tableName, "updated_at")
	_cdKeys.Key = field.NewString(tableName, "key")
	_cdKeys.Count_ = field.NewInt32(tableName, "count")
	_cdKeys.IsEnable = field.NewBool(tableName, "is_enable")

	_cdKeys.fillFieldMap()

	return _cdKeys
}

// cdKeys CdKey 卡密数据
type cdKeys struct {
	cdKeysDo

	ALL       field.Asterisk
	ID        field.Int64  // 主键ID
	CreatedAt field.Time   // 创建时间
	UpdatedAt field.Time   // 更新时间
	Key       field.String // KEY值
	Count_    field.Int32  // 可用次数
	IsEnable  field.Bool   // 是否启用

	fieldMap map[string]field.Expr
}

func (c cdKeys) Table(newTableName string) *cdKeys {
	c.cdKeysDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c cdKeys) As(alias string) *cdKeys {
	c.cdKeysDo.DO = *(c.cdKeysDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *cdKeys) updateTableName(table string) *cdKeys {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.Key = field.NewString(table, "key")
	c.Count_ = field.NewInt32(table, "count")
	c.IsEnable = field.NewBool(table, "is_enable")

	c.fillFieldMap()

	return c
}

func (c *cdKeys) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *cdKeys) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 6)
	c.fieldMap["id"] = c.ID
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["key"] = c.Key
	c.fieldMap["count"] = c.Count_
	c.fieldMap["is_enable"] = c.IsEnable
}

func (c cdKeys) clone(db *gorm.DB) cdKeys {
	c.cdKeysDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c cdKeys) replaceDB(db *gorm.DB) cdKeys {
	c.cdKeysDo.ReplaceDB(db)
	return c
}

type cdKeysDo struct{ gen.DO }

type ICdKeysDo interface {
	gen.SubQuery
	Debug() ICdKeysDo
	WithContext(ctx context.Context) ICdKeysDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICdKeysDo
	WriteDB() ICdKeysDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICdKeysDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICdKeysDo
	Not(conds ...gen.Condition) ICdKeysDo
	Or(conds ...gen.Condition) ICdKeysDo
	Select(conds ...field.Expr) ICdKeysDo
	Where(conds ...gen.Condition) ICdKeysDo
	Order(conds ...field.Expr) ICdKeysDo
	Distinct(cols ...field.Expr) ICdKeysDo
	Omit(cols ...field.Expr) ICdKeysDo
	Join(table schema.Tabler, on ...field.Expr) ICdKeysDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICdKeysDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICdKeysDo
	Group(cols ...field.Expr) ICdKeysDo
	Having(conds ...gen.Condition) ICdKeysDo
	Limit(limit int) ICdKeysDo
	Offset(offset int) ICdKeysDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICdKeysDo
	Unscoped() ICdKeysDo
	Create(values ...*model.CdKeys) error
	CreateInBatches(values []*model.CdKeys, batchSize int) error
	Save(values ...*model.CdKeys) error
	First() (*model.CdKeys, error)
	Take() (*model.CdKeys, error)
	Last() (*model.CdKeys, error)
	Find() ([]*model.CdKeys, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CdKeys, err error)
	FindInBatches(result *[]*model.CdKeys, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.CdKeys) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICdKeysDo
	Assign(attrs ...field.AssignExpr) ICdKeysDo
	Joins(fields ...field.RelationField) ICdKeysDo
	Preload(fields ...field.RelationField) ICdKeysDo
	FirstOrInit() (*model.CdKeys, error)
	FirstOrCreate() (*model.CdKeys, error)
	FindByPage(offset int, limit int) (result []*model.CdKeys, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICdKeysDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c cdKeysDo) Debug() ICdKeysDo {
	return c.withDO(c.DO.Debug())
}

func (c cdKeysDo) WithContext(ctx context.Context) ICdKeysDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c cdKeysDo) ReadDB() ICdKeysDo {
	return c.Clauses(dbresolver.Read)
}

func (c cdKeysDo) WriteDB() ICdKeysDo {
	return c.Clauses(dbresolver.Write)
}

func (c cdKeysDo) Session(config *gorm.Session) ICdKeysDo {
	return c.withDO(c.DO.Session(config))
}

func (c cdKeysDo) Clauses(conds ...clause.Expression) ICdKeysDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c cdKeysDo) Returning(value interface{}, columns ...string) ICdKeysDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c cdKeysDo) Not(conds ...gen.Condition) ICdKeysDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c cdKeysDo) Or(conds ...gen.Condition) ICdKeysDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c cdKeysDo) Select(conds ...field.Expr) ICdKeysDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c cdKeysDo) Where(conds ...gen.Condition) ICdKeysDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c cdKeysDo) Order(conds ...field.Expr) ICdKeysDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c cdKeysDo) Distinct(cols ...field.Expr) ICdKeysDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c cdKeysDo) Omit(cols ...field.Expr) ICdKeysDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c cdKeysDo) Join(table schema.Tabler, on ...field.Expr) ICdKeysDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c cdKeysDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICdKeysDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c cdKeysDo) RightJoin(table schema.Tabler, on ...field.Expr) ICdKeysDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c cdKeysDo) Group(cols ...field.Expr) ICdKeysDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c cdKeysDo) Having(conds ...gen.Condition) ICdKeysDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c cdKeysDo) Limit(limit int) ICdKeysDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c cdKeysDo) Offset(offset int) ICdKeysDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c cdKeysDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICdKeysDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c cdKeysDo) Unscoped() ICdKeysDo {
	return c.withDO(c.DO.Unscoped())
}

func (c cdKeysDo) Create(values ...*model.CdKeys) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c cdKeysDo) CreateInBatches(values []*model.CdKeys, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c cdKeysDo) Save(values ...*model.CdKeys) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c cdKeysDo) First() (*model.CdKeys, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CdKeys), nil
	}
}

func (c cdKeysDo) Take() (*model.CdKeys, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CdKeys), nil
	}
}

func (c cdKeysDo) Last() (*model.CdKeys, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CdKeys), nil
	}
}

func (c cdKeysDo) Find() ([]*model.CdKeys, error) {
	result, err := c.DO.Find()
	return result.([]*model.CdKeys), err
}

func (c cdKeysDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CdKeys, err error) {
	buf := make([]*model.CdKeys, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c cdKeysDo) FindInBatches(result *[]*model.CdKeys, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c cdKeysDo) Attrs(attrs ...field.AssignExpr) ICdKeysDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c cdKeysDo) Assign(attrs ...field.AssignExpr) ICdKeysDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c cdKeysDo) Joins(fields ...field.RelationField) ICdKeysDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c cdKeysDo) Preload(fields ...field.RelationField) ICdKeysDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c cdKeysDo) FirstOrInit() (*model.CdKeys, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CdKeys), nil
	}
}

func (c cdKeysDo) FirstOrCreate() (*model.CdKeys, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CdKeys), nil
	}
}

func (c cdKeysDo) FindByPage(offset int, limit int) (result []*model.CdKeys, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c cdKeysDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c cdKeysDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c cdKeysDo) Delete(models ...*model.CdKeys) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *cdKeysDo) withDO(do gen.Dao) *cdKeysDo {
	c.DO = *do.(*gen.DO)
	return c
}
